            ------
            Jaxen Example
            ------
            David Schuler
            ------
            Date


Jaxen
	
 Below you will find the steps for mutation testing Jaxen, an open source XPath
 library.
* Obtaining and Building

 First we check out Jaxen from the svn (we use revision 1342 in this example).

+-------------------------------+
svn co -r1342 https://svn.codehaus.org/jaxen/trunk/jaxen/jaxen jaxen
+-------------------------------+

 Then we compile Jaxen and run the tests using maven 1.1

+-------------------------------+
maven java:compile
maven test
+-------------------------------+

* Setting Up


 After we compiled the project, we copy <<<javalanche.xml>>> to this directory.

+-------------------------------+
cp ../../javalanche.xml .
+-------------------------------+

 Then we start the database:

+-------------------------------+
ant -f javalanche.xml -Djavalanche=../..  startHsql
+-------------------------------+

 and export the database schema:

+-------------------------------+
ant -f javalanche.xml -Djavalanche=../.. schemaexport
+-------------------------------+


 In order to obtain the classpath used to run the tests, we run maven with the -X
 switch.

+-------------------------------+
maven test -X
+-------------------------------+

 Among other output this will also give the classpath used to run the tests.

+-------------------------------+
'-classpath'
'/jaxen/target/test-classes:/jaxen/target/classes:/.maven/repository/dom4j/jars/dom4j-1.6.1.jar:...'
+-------------------------------+


 From this output we take every entry, except of the jars that begin with <<<ant->>>.

 The name of the test suite for this project is <<<org.jaxen.test.JaxenTests>>>
 and the common package prefix is <<<org.jaxen>>>.
 
 We can specify this information at the top of the <<<mutation.xml>>> file, such 
 that we do not have to provide it in every step.
 
+-------------------------------+
<property name="cp" value="/jaxen/target/test-classes:/jaxen/target/classes:/.maven/repository/dom4j/jars/dom4j-1.6.1.jar:..." />
<property name="prefix" value="org.jaxen"/>
<property name="javalanche" value="/path/to/javalanche-0.1" />
<property name="testsuite" value="org.jaxen.test.JaxenTests"/>	

+-------------------------------+


* Checking Tests

 Using the modified <<<javalanche.xml>>> file we can check the tests.
 
+-------------------------------+
ant  -f javalanche.xml testTask1
+-------------------------------+

  This task shows us that 689 tests were executed and all passed. Thus we can 
  proceed checking the tests.

+-------------------------------+
ant  -f javalanche.xml testTask2
+-------------------------------+

 This task reports that a test case failed, namely <<<org.jaxen.test.SingleObjectIteratorTest.testNoInfiniteLoops>>>
 When we look at the source code of this class, we see that this test case 
 only works once. When it is executed twice it fails. Thus we apply the 
 following fix to the test:
 
+-------------------------------+
Index: src/java/test/org/jaxen/test/SingleObjectIteratorTest.java
===================================================================
--- src/java/test/org/jaxen/test/SingleObjectIteratorTest.java	(revision 1342)
+++ src/java/test/org/jaxen/test/SingleObjectIteratorTest.java	(working copy)
@@ -54,8 +54,13 @@
 
 public class SingleObjectIteratorTest extends TestCase {
 
-    private Iterator iterator = new SingleObjectIterator(new Object());
-    
+	
+    private Iterator iterator;
+	
+	public void setUp(){
+		iterator = new SingleObjectIterator(new Object());
+    }
+	
     public void testNoInfiniteLoops() {
      
         iterator.next();
+-------------------------------+

 Then we compile the tests again:

+-------------------------------+
maven test:compile
+-------------------------------+

 and run <<<testTask2>>> again, which now reports no error.

 Finally we run the last check of the test suite, that should also pass.
 
 
+-------------------------------+
ant -f javalanche.xml testTask3
+-------------------------------+

* Scanning the Project

 Now we can scan the project for tests and possible mutations:
 
+-------------------------------+
ant -f javalanche.xml scanProject
+-------------------------------+

+-------------------------------+
ant -f javalanche.xml scan
+-------------------------------+


* Executing Mutations

 First the tasks have to be created:

+-------------------------------+
ant -f javalanche.xml createTasks
+-------------------------------+

 Then these task can be executed:

+-------------------------------+
ant -f javalanche.xml runMutations -Dmutation.file=mutation-files/mutation-task-org_jaxen-01.txt 
+-------------------------------+

* Excuting tasks in parallel
 
  Using the make tool, the tasks can also be executed in parallel.
  See {{{documentation.html#parallel} the documentation}} for running tasks in
  parallel.
	  

* Analyzing Results

 After the mutations have been executed the results can be analyzed:

+-------------------------------+
 ant -f javalanche.xml  analyzeResults
+-------------------------------+


