            ------
            Triangle Example
            ------
            David Schuler
            ------
            Date


Triangle

 The triangle project is a simple project that classifies triangles and has a
 JUnit test suite. 
 The triangle example is located in the <<<examples/triangle>>> folder of the
 Javalanche distribution.

* Compiling the project

 Before we start mutation testing the project, we need to compile it. 
 To this end we use the <<<test>>> task of the project.
 
+-------------------------------+
ant test
+-------------------------------+
 
 Which produces the following output:

+-------------------------------+
Buildfile: build.xml

compile:
    [mkdir] Created dir: /javalanche/examples/triangle/target/classes
    [javac] Compiling 6 source files to /javalanche/examples/triangle/target/classes

test:
    [mkdir] Created dir: /javalanche/examples/triangle/target/test-reports
    [junit] Running triangle.tests.TriangleTestSuite
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.02 sec

BUILD SUCCESSFUL
Total time: 2 seconds
+-------------------------------+


* Setting Up

 After we compiled the project, we copy <<<javalanche.xml>>> to this directory.

+-------------------------------+
cp ../../javalanche.xml .
+-------------------------------+

 Then we start the database:

+-------------------------------+
ant -f javalanche.xml -Djavalanche=../../  startHsql
+-------------------------------+

 and export the database schema:

+-------------------------------+
ant -f javalanche.xml -Djavalanche=../../  schemaexport
+-------------------------------+


* Mutation Testing in one Step
 
 After we compiled the project and copied the XML file, we can run the mutation
 testing in one step:
 
+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  mutationTest
+-------------------------------+

 This command executes all steps that are necessary. And displays the results.
 The following sections describe the single steps in detail.
 
* Checking Tests

 After we setup Javalanche, we can test if the test suite behaves as expected

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  testTask1
+-------------------------------+

 Alternatively, we can also specify the single test classes instead of the test suite

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar  -Dtests=triangle.tests.Triangle1Test:triangle.tests.Triangle2Test:triangle.tests.Triangle3Test -Djavalanche=../../  testTask1
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

testTask1:

test-javalanche:
    [mkdir] Created dir: /javalanche/examples/triangle/mutation-files/junit-reports
    [junit] Running triangle.tests.TriangleTestSuite
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.108 sec

BUILD SUCCESSFUL
Total time: 1 second

+-------------------------------+

 The output tells us that all 18 tests passed using the Javalanche test task, 
 and we can test the Javalanche test runner.

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  testTask2
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

testTask2:

test-javalanche:
    [junit] Integrating RandomPermutationTestSuite
    [junit] Running triangle.tests.TriangleTestSuite
    [junit] All 18 tests passed 
    [junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 0.08 sec

BUILD SUCCESSFUL
Total time: 4 seconds

+-------------------------------+


 Now we can check if the tests are independent of execution frequency and
 execution order

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  testTask3
+-------------------------------+

 Output: 


+-------------------------------+
Buildfile: javalanche.xml

testTask3:

test-javalanche:
    [junit] Integrating RandomPermutationTestSuite
    [junit] Running triangle.tests.TriangleTestSuite
    [junit] All 18 tests passed for 10 permutations
    [junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 0.537 sec

BUILD SUCCESSFUL
Total time: 4 seconds
+-------------------------------+


* Scanning Project

 As all of the tests are working we can scan the project:
 
+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  scanProject
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

_scanProject:

test-javalanche:
    [junit] Scanning project for classes
    [junit] Running triangle.tests.TriangleTestSuite
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.08 sec
    [junit] Got 6 classes with prefix: triangle

_scanForTests:
     [java] Found 4 test files.

scanProject:

BUILD SUCCESSFUL
Total time: 4 seconds
+-------------------------------+

 Before scanning for mutations, we have a look at the excludes file (<<<mutation-files/exclude.txt>>>).

+-------------------------------+
# triangle.Triangle
# triangle.TriangleType
triangle.tests.Triangle1Test
triangle.tests.Triangle2Test
triangle.tests.Triangle3Test
triangle.tests.TriangleTestSuite
+-------------------------------+

 There are two classes that are not excluded. Since TriangleType is a simple Enum, we also exclude
 it from mutation testing by removing the <<<# >>>.

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  scan
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

scan:

test-javalanche:
    [junit] Scanning for mutations
    [junit] Running de.unisb.cs.st.javalanche.mutation.runtime.testDriver.junit.JavalancheWrapperTestSuite
    [junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 1.286 sec
    [junit] Got 0 mutation possibilities before run.
    [junit] Got 47 mutation possibilities after run.
    [junit] Added 47 mutation possibilities.
    [junit] Added 18 tests. Total number of tests for project triangle : 18
    [junit] 47 (100.00 %) mutations are covered by tests.

BUILD SUCCESSFUL
Total time: 4 seconds

+-------------------------------+



* Executing Mutations
 
 Before executing the mutations we have to create a task:
 
 
+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  createTasks
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

createTasks:
     [java] Task created: /javalanche/examples/triangle/mutation-files/mutation-task-triangle-01.txt
     [java] Created 1 mutation tasks

BUILD SUCCESSFUL
Total time: 4 seconds
+-------------------------------+

 Using the produced task we can execute the mutations.

+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  runMutations \
-Dmutation.file=./mutation-files/mutation-task-triangle-01.txt
+-------------------------------+

 Output:

+-------------------------------+
Buildfile: javalanche.xml

runMutations:

test-javalanche:
    [junit] Run mutation testing (without impact detection)
    [junit] Running de.unisb.cs.st.javalanche.mutation.runtime.testDriver.junit.JavalancheWrapperTestSuite
    [junit] Applying 1th mutation with id 1. Running 18 tests
    [junit] Applying 2th mutation with id 2. Running 16 tests
    [junit] Applying 3th mutation with id 3. Running 14 tests
    [junit] Applying 4th mutation with id 4. Running 13 tests
    [junit] Applying 5th mutation with id 5. Running 13 tests
    [junit] Applying 6th mutation with id 6. Running 13 tests
    [junit] Applying 7th mutation with id 7. Running 2 tests
    [junit] Applying 8th mutation with id 8. Running 2 tests
    [junit] Applying 9th mutation with id 9. Running 2 tests
    [junit] Applying 10th mutation with id 10. Running 13 tests
    [junit] Applying 11th mutation with id 11. Running 3 tests
    [junit] Applying 12th mutation with id 12. Running 3 tests
    [junit] Applying 13th mutation with id 13. Running 3 tests
    [junit] Applying 14th mutation with id 14. Running 3 tests
    [junit] Applying 15th mutation with id 15. Running 13 tests
    [junit] Applying 16th mutation with id 16. Running 4 tests
    [junit] Applying 17th mutation with id 17. Running 4 tests
    [junit] Applying 18th mutation with id 18. Running 4 tests
    [junit] Applying 19th mutation with id 19. Running 4 tests
    [junit] Applying 20th mutation with id 20. Running 13 tests
    [junit] Applying 21th mutation with id 21. Running 6 tests
    [junit] Applying 22th mutation with id 22. Running 6 tests
    [junit] Applying 23th mutation with id 23. Running 4 tests
    [junit] Applying 24th mutation with id 24. Running 4 tests
    [junit] Applying 25th mutation with id 25. Running 2 tests
    [junit] Applying 26th mutation with id 26. Running 2 tests
    [junit] Applying 27th mutation with id 27. Running 7 tests
    [junit] Applying 28th mutation with id 28. Running 7 tests
    [junit] Applying 29th mutation with id 29. Running 7 tests
    [junit] Applying 30th mutation with id 30. Running 7 tests
    [junit] Applying 31th mutation with id 31. Running 6 tests
    [junit] Applying 32th mutation with id 32. Running 6 tests
    [junit] Applying 33th mutation with id 33. Running 6 tests
    [junit] Applying 34th mutation with id 34. Running 1 tests
    [junit] Applying 35th mutation with id 35. Running 1 tests
    [junit] Applying 36th mutation with id 36. Running 5 tests
    [junit] Applying 37th mutation with id 37. Running 5 tests
    [junit] Applying 38th mutation with id 38. Running 5 tests
    [junit] Applying 39th mutation with id 39. Running 5 tests
    [junit] Applying 40th mutation with id 40. Running 2 tests
    [junit] Applying 41th mutation with id 41. Running 2 tests
    [junit] Applying 42th mutation with id 42. Running 3 tests
    [junit] Applying 43th mutation with id 43. Running 3 tests
    [junit] Applying 44th mutation with id 44. Running 3 tests
    [junit] Applying 45th mutation with id 45. Running 3 tests
    [junit] Applying 46th mutation with id 46. Running 3 tests
    [junit] Applying 47th mutation with id 47. Running 3 tests
    [junit] ALL_RESULTS
    [junit] All mutations have results - this means they have already been applied and executed
    [junit] 47 mutations were applied. 47 Mutation results were recorded. 47 Mutations where actually touched.



+-------------------------------+


 
* {Analyzing Results}

 Since all mutations are executed, we can analyze the mutation testing 
 results.
 
+-------------------------------+
ant -f javalanche.xml -Dprefix=triangle -Dcp=target/classes/:./lib/junit.jar -Dtests=triangle.tests.TriangleTestSuite -Djavalanche=../../  analyzeResults
+-------------------------------+
 
 
+-------------------------------+
Buildfile: javalanche.xml

analyzeResults:
     [echo]  Using 2048m memory 
     [java] Analyzed Results for mutations with prefix: triangle
     [java] No results for 0 mutations
     [java] --------------------------------------------------------------------------------
     [java] Results from de.unisb.cs.st.javalanche.mutation.analyze.MutationResultAnalyzer
     [java] Total mutations:                                                47 
     [java] Covered mutations (in scan step):                               47 (100.00%)
     [java] Covered mutations (actually executed during mutation testing):  47 (100.00%)
     [java] Not covered mutations:                                           0 ( 0.00%)
     [java] Killed mutations:                                               43 (91.49%)
     [java] Surviving mutations:                                             4 ( 8.51%)
     [java] Mutation score:                                             91.49% 
     [java] Mutation score for mutations that were covered:             91.49% 
     [java] 
     [java] --------------------------------------------------------------------------------
     [java] 
     [java] Results from class de.unisb.cs.st.javalanche.mutation.analyze.html.HtmlAnalyzer
     [java] Created report in mutation-files/report saved 1 files 
     [java] --------------------------------------------------------------------------------

BUILD SUCCESSFUL
Total time: 3 seconds
+-------------------------------+



 This will also generate an html report for the mutation testing results. 
 For each tested class the source code (if available) and a a table with 
 its mutations is reported.
 For each mutation a table shows its database id, line number, mutation type,
 whether it is detected or not, and its impact. 
 If the line number of a mutation is followed by another number in braces, more
 than one mutation of this type were made in this line. 
 The number in braces then gives the position of this mutation in the bytecode 
 for this line (starting from 0)

[img/html_report.png]


	 
 
