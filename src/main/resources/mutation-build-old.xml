
<project name="File to include from ant build files" default="">
	
	<!--property file="mutation.incl.properties" /-->
	
	<path id="invariant.classpath">
		<pathelement path="${jvalanche.projects.location}/adabu2-all/adabu2-core/target/classes/" />
		<pathelement path="${jvalanche.projects.location}/adabu2-all/adabu2-cli/target/classes/" />
		<pathelement path="${jvalanche.projects.location}/adabu2-all/adabu2-tracer/target/classes/"/>
		<pathelement path="${jvalanche.projects.location}/adabu2-check-invariants/target/classes/" />
		<pathelement path="${jvalanche.projects.location}/adabu-util/target/classes/" />
		<pathelement path="${jvalanche.projects.location}/adabu2-all/adabu2-hoare/target/classes/" />
		<pathelement path="${jvalanche.projects.location}/util/target/classes/" />
		<pathelement location="${javalanche.jars.dir}/asm-all-3.1.jar" />
		<pathelement location="${javalanche.jars.dir}/asm-commons-3.1.jar" />
		<pathelement location="${javalanche.jars.dir}/asm-tree-3.1.jar" />
		<pathelement location="${javalanche.jars.dir}/asm-util-3.1.jar" />
		<pathelement location="${javalanche.jars.dir}/commons-collections-3.2.1.jar" />
		<pathelement location="${javalanche.jars.dir}/commons-io-1.4.jar" />
		<pathelement location="${javalanche.jars.dir}/log4j-1.2.14.jar" />
		<pathelement location="${javalanche.jars.dir}/google-collect-snapshot-20080530.jar" />
		<pathelement location="${javalanche.jars.dir}/xstream-1.2.1.jar" />
		<pathelement location="${javalanche.jars.dir}/xpp3_min-1.1.3.4.O.jar" />
		<pathelement location="${javalanche.jars.dir}/c3p0-0.9.1.1.jar" />
		<pathelement location="${javalanche.jars.dir}/commons-lang-2.4.jar" />
		<pathelement location="${javalanche.jars.dir}/commons-io-1.4.jar" />
		<pathelement location="${javalanche.jars.dir}/util-0.1.jar" />
		<pathelement location="${javalanche.jars.dir}/junit-4.4.jar" />
		<pathelement location="${javalanche.jars.dir}/log4j-1.2.14.jar" />
		<pathelement location="${javalanche.jars.dir}/commons-collections-3.2.1.jar" />
		<pathelement location="${javalanche.jars.dir}/asm-all-3.0.jar" />
		<pathelement location="${javalanche.jars.dir}/daikon.jar" />
	</path>
	
	
	
	<property name="adabu.boot.jars" value="${jvalanche.projects.location}/adabu2-all/adabu2-core/target/classes/:${jvalanche.projects.location}/adabu2-all/adabu2-cli/target/classes/:${jvalanche.projects.location}/adabu2-all/adabu2-tracer/target/classes/:${jvalanche.projects.location}/adabu-util/target/classes/:${jvalanche.projects.location}/adabu2-all/adabu2-hoare/target/classes/:${javalanche.jars.dir}/asm-3.1.jar:${javalanche.jars.dir}/asm-commons-3.1.jar:${javalanche.jars.dir}/asm-tree-3.1.jar:${javalanche.jars.dir}/asm-util-3.1.jar:${javalanche.jars.dir}/commons-collections-3.2.1.jar:${javalanche.jars.dir}/commons-io-1.4.jar:${javalanche.jars.dir}/log4j-1.2.14.jar"/>
	<property name="adabu.javaagent" value="${javalanche.jars.dir}/adabu2-core-0.3.jar" />
	<property name="javalanche.invariant.javaagent" value="${jvalanche.projects.location}/adabu2-check-invariants/invariantJavaagent.jar" />
	
	<property name="invariant.dir" value="invariant-files/" />
	<property name="field.file" value="${invariant.dir}/field-results.ser" />
	<property name="invariant.checker.file" value="${invariant.dir}/${project.prefix}-invariant-checkers.ser" />
	<property name="adabu2.resultfilename" value="${invariant.dir}/${project.prefix}-trace.out" />
	
	
	<property name="mutation.base.dir" value="${javalanche.projects.location}/mutationTest/" />
	<property name="javalanche.mutation.javaagent" value="${mutation.base.dir}/target/javaagent.jar" />
	<property name="mutation.classes.dir" value="${mutation.base.dir}/target/classes" />
	<property name="mutation.classes.dir" value="${mutation.base.dir}/target/classes" />
	<property name="mutation.jars.dir" value="${mutation.base.dir}/target/javalanche-0.1-dist.dir/lib/" />
	
	<path id="mutation.classpath">
		<pathelement location="${mutation.classes.dir}"/>
		<fileset dir="${mutation.jars.dir}" includes="*.jar"/>
	</path>
	
	
	<target name="testTask" description="* test the javalanche task (should behave in the same way as the regular test task)">
		
		<path id="javalanche.classpath.add"/>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" " />
			<reference refid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	<target name="trace" description="* trace tests with addabu2">
		<property name="trace.mem" value="-Xmx1024m"/>
		<property name="trace.bootclasspath" value="-Xbootclasspath/a:${adabu.boot.jars}"/>
		<property name="trace.javaagent" value="-javaagent:${adabu.javaagent}"/>
		<property name="trace.result.file" value="-Dadabu2.resultfilename=${adabu2.resultfilename}"/>
		<property name="trace.skiparrayreads" value="-Dadabu2.skiparrayreads=true"/>
		<property name="trace.multifile" value="-Dinvariant.multifile=true"/>
		
		<path id="trace.javalanche.classpath.add"/>
		
		<mkdir dir="${invariant.dir}" />
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${trace.mem} ${trace.bootclasspath} ${trace.javaagent} ${trace.result.file} ${trace.skiparrayreads} ${trace.multifile}" />
			<reference refid="trace.javalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	<target name="createDaikonFiles" description="* create daikon dtrace files from adabu trace files">
		<echo> Processing files with pattern  ${adabu2.resultfilename} </echo>
		<echo> Generating trace information for classes with prefix ${project.prefix} </echo>
		<java dir="${basedir}" fork="true" maxmemory="2048m" classname="de.unisb.cs.st.javalanche.invariants.cli.DaikonTraceFileGenerator">
			<assertions enableSystemAssertions="true">
				<enable/>
			</assertions>
			<classpath refid="invariant.classpath"/>
			<arg value="${project.prefix}"/>
			<arg value="${adabu2.resultfilename}"/>
		</java>
	</target>
	
	<target name="generateDaikonMakefile" description="* generate a Makefile that processes all dtrace files with daikon">
		<java dir="${basedir}" fork="true" classname="de.unisb.cs.st.javalanche.invariants.util.DaikonMakeFileGenerator">
			<sysproperty key="trace.dir" value="${invariant.dir}" />
			<sysproperty key="daikon.command" value="${basedir}/runDaikon.sh" />
			<classpath refid="invariant.classpath"/>
		</java>
	</target>
	
	
	<target name="generateDaikonScript" description="* generate a script that runs daikon">
		<java dir="${basedir}" fork="true" classname="de.unisb.cs.st.javalanche.invariants.util.DaikonShellScriptGenerator">
			<sysproperty key="daikon.jar" value="${javalanche.jars.dir}/daikon.jar" />
			<sysproperty key="script.name" value="${basedir}/runDaikon.sh" />
			<classpath refid="invariant.classpath"/>
		</java>
	</target>
	
	
	
	
	<target name="createInvariantCheckers" description="* create invariant checkers for all invariant files (.inv or .inv.gz) in a directory">
		<echo>Pattern for invariants: ${invariant.checker.file} </echo>
		<java classname="de.unisb.cs.st.javalanche.invariants.cli.DaikonInvariantReader" maxmemory="2048m" fork="true">
			<jvmarg value="-Dinvariant.dir=${invariant.dir}"/>
			<jvmarg value="-Dinvariant.checker.file=${invariant.checker.file}"/>
			<jvmarg value="-Djavalanche.invariant.field.file=${field.file}"/>
			<classpath refid="invariant.classpath" />
		</java>
	</target>
	
	<target name="scanFields" description="* scan the visibility and type of all fields">
		<property name="scan.javaagent" value="-javaagent:${javalanche.invariant.javaagent}"/>
		<property name="scan.invariant.mode" value="-Dinvariant.mode=FIELD_VIS"/>
		<property name="scan.field.file.arg" value="-Djavalanche.invariant.field.file=${field.file}"/>
		
		<path id="javalanche.classpath.add">
			<path refid="invariant.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${scan.javaagent} ${scan.invariant.mode} ${scan.field.file.arg}" />
			<reference refid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	<target name="checkInvariants" description="* run the test suite and check for validity of invariants (invariants should hold for the whole test suite)">
		<property name="check.invariant.javaagent" value="-javaagent:${javalanche.invariant.javaagent}"/>
		<property name="check.invariant.invariant.mode" value="-Dinvariant.mode=CHECK_INVARIANT"/>
		<property name="check.invariant.field.file.arg" value="-Djavalanche.invariant.field.file=${field.file}"/>
		<property name="check.invariant.checker.file" value="-Dinvariant.checker.file=${invariant.checker.file}"/>
		<property name="check.invariant.verbose.summary" value="-Dverbose.invariant.summary=false"/>
		
		<path id="check.invariant.javalanche.classpath.add">
			<path refid="invariant.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${check.invariantjavaagent} ${check.invariantinvariant.mode} ${check.invariantfield.file.arg} ${check.invariantchecker.file} ${check.invariantverbose.summary}" />
			<reference refid="check.invariantjavalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	<target name="cleanJavalanche" description="* delete all files produced by javalanche">
		<delete dir="${invariant.dir}"/>
	</target>
	
	<target name="runMake">
		<exec executable="make" spawn="false">
			<arg value="-j5"/>
		</exec>
	</target>
	
	
	<target name="allInvariant" depends="test,trace,createDaikonFiles,generateDaikonMakefile,generateDaikonScript,runMake,createInvariantCheckers,scanFields,checkInvariants,checkInvariants,checkInvariants" description="* runs all tasks in order to produce invariant checkers"/>
	
	<target name="scan" description="* scans the project for mutations">
		
		<property name="scan.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="scan.memory" value="-Xmx1524m"/>
		<property name="scan.mutation.run.mode" value="-Dmutation.run.mode=scan"/>
		<property name="scan.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="scan.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		
		
		<path id="scan.javalanche.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${scan.mutation.javaagent} ${scan.memory} ${scan.mutation.run.mode} ${scan.javalanche.package.prefix} ${scan.javalanche.project.test.suite}" />
			<reference refid="scan.javalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	<target name="createTasks" description="* create task files that are used to execute the mutations">
		<java classname="de.unisb.cs.st.javalanche.mutation.run.threaded.task.MutationTaskCreator" maxmemory="1024m" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<sysproperty key="mutation.number.of.tasks" value="10" />
			<sysproperty key="mutation.mutations.per.task" value="400" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	
	
		
	
	
	<target name="runMutations" description="* run a given mutation task">
		<property name="run.mutations.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="run.mutations.memory" value="-Xmx1524m"/>
		<property name="run.mutations.mutation.run.mode" value="-Dmutation.run.mode=mutation"/>
		<property name="run.mutations.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="run.mutations.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<property name="run.mutations.mutation.file" value="-Dmutation.file=${mutation.file}"/>
		<property name="run.mutations.mutation.result.file" value="-Dmutation.result.file=${mutation.result.file}"/>
		
		
		<path id="run.mutations.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${run.mutations.mutation.javaagent} ${run.mutations.memory} ${run.mutations.mutation.run.mode} ${run.mutations.javalanche.package.prefix} ${run.mutations.javalanche.project.test.suite} ${run.mutations.mutation.file} ${run.mutations.mutation.result.file} " />
			<reference refid="run.mutations.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	
	<target name="generateMutationMakefile" description="* create a Makefile for the mutation tasks">
		<java dir="${basedir}" fork="true" classname="de.unisb.cs.st.javalanche.mutation.util.MutationMakeFileGenerator">
			<classpath refid="mutation.classpath"/>
			<sysproperty key="mutation.package.prefix" value="${project.prefix}"/>
			<sysproperty key="mutation.comand" value="${basedir}/runMutations.sh"/>
		</java>
	</target>

	<target name="analyzeResults" description="* analyze the mutation test results.">
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.AnalyzeMain" maxmemory="1024m" fork="true">
			<jvmarg value="-Dmutation.package.prefix=${project.prefix}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>

</project>
